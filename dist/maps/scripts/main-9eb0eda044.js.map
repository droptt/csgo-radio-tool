{"version":3,"sources":["scripts/main.js"],"names":["app","angular","module","config","$translateProvider","useStaticFilesLoader","prefix","suffix","uniformLanguageTag","determinePreferredLanguage","fallbackLanguage","useLocalStorage","localStorageServiceProvider","setPrefix","$analyticsProvider","virtualPageviews","run","$rootScope","init","loaded","settings","allowed_types","msg_type","radioMenu","RadioPanel.txt","Groups","standard","hotkey","title","timeout","Commands","group","report","boxes","Array","version","model","Titles","loadingController","$scope","messagesService","localStorageService","$filter","$location","$analytics","$mdToast","$mdDialog","loading_state","isJson","str","JSON","parse","e","shared","isSupported","get","newUser","versionNotification","show","alert","clickOutsideToClose","textContent","ariaLabel","ok","eventTrack","category","set","custom","fromJson","constructor","importOldCustom","importCustom","$watch","customSave","hashUrl","decodeURIComponent","window","location","hash","replace","stringify","importMessages","hasSaved","saved","messagesLoaded","customLoaded","isLoaded","element","document","find","removeClass","onMessagesLoad","data","messages","onCustomLoad","onCommandLoad","commands","onFail","reason","simple","statusText","position","hideDelay","label","stauts","error","onCmdFail","getMessages","then","getCustom","getCommand","controller","mainController","uiService","generate","ev","Dialog","output","GenerateRP","openChangelog","changelog","showHelp","index","help","newMessage","editMessage","list","item","message","importFile","moved","splice","resetMessages","$event","Confirm","reset","defaults","messageController","removeMessage","type","cmd","disabled","UID","deleteImportedCommand","checkLimit","event","target","attributes","nodeName","targetName","nodeValue","parentNode","id","text","indexOf","length","factory","querySearch","query","results","filter","this","newFilter","renderCommand","commandArray","command","searchText","args","deleteMessage","messageCopy","lists","msgGroup","saveChanges","origMessage","console","log","color","italic","bold","saveHash","save","createFilterFor","lowercaseQuery","lowercase","Name","findCommand","parseCommandLine","commandLine","split","cmdArray","cmdInfo","skipfirst","Value","push","charAt","substring","create","toLowerCase","Math","floor","random","saveEdit","$http","VDFService","response","getChangelog","generateRP","buildList","copy","C_box","C_I","E","C_msg","msg","convertList","filteredList","StandardRadio","GroupRadio","ReportRadio","htmlTags","imported","strContains","RG","match","customExists","hasOwnProperty","customFilter","newList","SaveMessages","ImportRP","file","obj","cMsg","checkHtmlTags","titles","i","groups","check","watch","default","newMessageController","messageService","requirements","cheats","dev","sponly","ch","sp","cd","client","gl","server","selected","dialog","advanced","New","mode","copyBtn","colorpickeroptions","genericPalette","preview","history","rgb","clearButton","hsl","cacheResults","autocomplete","checkArg","togAdv","rawCommand","rawCommandBefore","togI","togB","addField","deleteM","deleteCustomCommand","hide","$destroy","cancel","confirm","Object","keys","cmdName","$error","$submitted","sharedController","copyAll","InvokeConfirm","yes","callback","skipHide","targetEvent","GenericDialogController","answer","awnser","InvokeDialog","options","locals","templateUrl","template","parent","body","undefined","onChangelog","Changelog","ChangeLog","import","importForm","extra","helpD","_dump","pretty","level","ui","notification","indent","buf","line_indent","key","join","String","line","m","lines","stack","expect_bracket","re_kv","RegExp","j","trim","exec","val","pop"],"mappings":"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","file":"../../scripts/main-9eb0eda044.js","sourcesContent":["/**\r\n * @Author: Drop\r\n * @Creation: 7/25/2016 2:19 PM (Tomorrow never dies)\r\n */\r\n\r\nvar app = angular.module('csgo-radio', ['pascalprecht.translate',\r\n  'ngCookies',\r\n  'dndLists',\r\n  'angularInlineEdit',\r\n  'ngMaterial',\r\n  'ngMessages',\r\n  'mdColorPicker',\r\n  'ngSanitize',\r\n  'angulartics',\r\n  'angulartics.google.analytics',\r\n  'LocalStorageModule'\r\n]);\r\n\r\napp.config(['$translateProvider', function ($translateProvider) {\r\n  $translateProvider.useStaticFilesLoader({\r\n    prefix: 'I18N/',\r\n    suffix: '.json'\r\n  })\r\n    .uniformLanguageTag('bcp47')\r\n    .determinePreferredLanguage()\r\n    .fallbackLanguage('en-US')\r\n    .useLocalStorage();\r\n}]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {\r\n  localStorageServiceProvider.setPrefix('');\r\n}]).config(['$analyticsProvider',function ($analyticsProvider) {\r\n  $analyticsProvider.virtualPageviews(false);\r\n}]).run(['$rootScope', function ($rootScope) {\r\n  $rootScope.init = {\r\n    'loaded': false\r\n  };\r\n  $rootScope.settings = {\r\n    'allowed_types': ['none', 'and'],\r\n    'msg_type': 'message',\r\n    'radioMenu': {\r\n      'RadioPanel.txt': {\r\n        'Groups': {\r\n          'standard': {\r\n            'hotkey': '1',\r\n            'title': '#SFUI_CommandRadio',\r\n            'timeout': '5',\r\n            'Commands': {},\r\n          },\r\n          'group': {\r\n            'hotkey': '2',\r\n            'title': '#SFUI_StandardRadio',\r\n            'timeout': '5',\r\n            'Commands': {},\r\n          },\r\n          'report': {\r\n            'hotkey': '3',\r\n            'title': '#SFUI_ReportRadio',\r\n            'timeout': '5',\r\n            'Commands': {}\r\n          }\r\n        }\r\n      }\r\n    },\r\n    'boxes': Array('StandardRadio', 'GroupRadio', 'ReportRadio')\r\n  };\r\n  $rootScope.settings.version = 20;\r\n  $rootScope.model = {\r\n    'standard': [],\r\n    'group': [],\r\n    'report': [],\r\n    'Titles': [null, null, null]\r\n  };\r\n}]);\r\n\n/**\r\n * @Author: Drop\r\n * @Creation: 7/25/2016 2:17 PM (The living daylights)\r\n */\r\n(function () {\r\n  var app = angular.module('csgo-radio');\r\n\r\n  var loadingController = ['$scope', '$rootScope', 'messagesService', 'localStorageService', '$filter', '$location', '$analytics', '$mdToast', '$mdDialog', function ($scope, $rootScope, messagesService, localStorageService, $filter, $location, $analytics, $mdToast, $mdDialog) {\r\n    $scope.loading_state = 'Loading Assets';\r\n    var isJson = function (str) {\r\n      try {\r\n        JSON.parse(str);\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    var init = function () {\r\n      var loaded = false,\r\n        shared = false;\r\n      if (localStorageService.isSupported) {\r\n        if (localStorageService.get('customVersion') !== null || localStorageService.get('version') !== null) {\r\n          $rootScope.settings.newUser = false;\r\n\r\n          if ($rootScope.settings.version === localStorageService.get('version')) { //Don't show new version notification\r\n            $rootScope.settings.versionNotification = false;\r\n          } else {\r\n            $rootScope.settings.versionNotification = true;\r\n            $mdDialog.show(\r\n              $mdDialog.alert()\r\n                .clickOutsideToClose(true)\r\n                .title('New on this version')\r\n                .textContent('Creating Custom messages is now way easier with Commands Autocomplete.')\r\n                .ariaLabel('New Version Dialog')\r\n                .ok('Got it!')\r\n            );\r\n            $analytics.eventTrack('New Version Dialog', {\r\n              category: 'radio_tool',\r\n            });\r\n            localStorageService.set('version', $rootScope.settings.version);\r\n          }\r\n        } else {\r\n          $rootScope.settings.newUser = true;\r\n          $rootScope.settings.versionNotification = true;\r\n          localStorageService.set('version', $rootScope.settings.version);\r\n          localStorageService.set('customVersion', 2); //TODO: customVersion is not supposed to be hardcoded.\r\n        }\r\n        if (localStorageService.get('custom') !== null) {\r\n          var custom = angular.fromJson(localStorageService.get('custom'));\r\n          if (custom.constructor === Array) {\r\n            $analytics.eventTrack('Legacy Custom List', {\r\n              category: 'radio_tool',\r\n            });\r\n            messagesService.importOldCustom(custom);\r\n          } else {\r\n            messagesService.importCustom(custom);\r\n          }\r\n        } else {\r\n          $rootScope.model.custom = $rootScope.init.custom;\r\n          $rootScope.$watch('model.custom', messagesService.customSave, true);\r\n        }\r\n        var hashUrl = decodeURIComponent(window.location.hash.replace('#/', '').replace('##', ''));\r\n        if (isJson(hashUrl) === true) {\r\n          if (hashUrl !== JSON.stringify(localStorageService.get('saved'))) {\r\n            $analytics.eventTrack('Shared Link loaded', {\r\n              category: 'radio_tool',\r\n            });\r\n            messagesService.importMessages(JSON.parse(hashUrl), false, true, false);\r\n            loaded = true;\r\n            shared = true;\r\n            $rootScope.settings.shared = true;\r\n            $rootScope.settings.hasSaved = (localStorageService.get('saved') === null) ? false : true;\r\n          }\r\n        }\r\n        if (localStorageService.get('saved') !== null && loaded === false) {\r\n          var saved = angular.fromJson(localStorageService.get('saved'));\r\n          messagesService.importMessages(saved, false, false);\r\n          loaded = true;\r\n        } else {\r\n          if (shared === false && loaded === false) {\r\n            messagesService.default();\r\n            loaded = true;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        $mdDialog.show(\r\n              $mdDialog.alert()\r\n                .clickOutsideToClose(true)\r\n                .title('Warning')\r\n                .textContent('Your browser doesn\\'t support Local Storage. Saving functionality is disabled.')\r\n                .ariaLabel('Localstorage Warning')\r\n                .ok('Got it!')\r\n            );\r\n            $analytics.eventTrack('Localstorage Warning Dialog', {\r\n              category: 'radio_tool',\r\n            });\r\n      }\r\n    };\r\n    var messagesLoaded = false;\r\n    var customLoaded = false;\r\n    var isLoaded = function () {\r\n      if (messagesLoaded === true && customLoaded === true) {\r\n        $rootScope.init.loaded = true;\r\n        angular.element(document).find('.wrapper').removeClass('hidden'); //It's necessary because the class is hardcoded into the html. Otherwise it would break the loader\r\n        init();\r\n      }\r\n    };\r\n    var onMessagesLoad = function (data) {\r\n      $rootScope.model.messages = data;\r\n      messagesLoaded = true;\r\n      isLoaded();\r\n    };\r\n    var onCustomLoad = function (data) {\r\n      $rootScope.init.custom = data;\r\n      customLoaded = true;\r\n      isLoaded();\r\n    };\r\n    var onCommandLoad = function (data) {\r\n      $rootScope.init.commands = data;\r\n      $rootScope.init.Commands = true;\r\n    };\r\n    var onFail = function (reason) {\r\n      $mdToast.show(\r\n        $mdToast.simple()\r\n          .textContent(reason.data + ': ' + reason.statusText + '. Please Reload the page or contact me.')\r\n          .position('top right')\r\n          .hideDelay(10000)\r\n      );\r\n      $analytics.eventTrack('Error: ' + reason.data, {\r\n        category: 'radio_tool',\r\n        label: reason.statusText + ': ' + reason.stauts\r\n      });\r\n      $scope.loading_state = 'Couldn\\'t load Messages.';\r\n      $scope.error = true;\r\n    };\r\n    var onCmdFail = function (reason) {\r\n      $mdToast.show(\r\n        $mdToast.simple()\r\n          .textContent('Unable to fetch commands list. Autocomplete is disabled.')\r\n          .position('top right')\r\n          .hideDelay(10000)\r\n      );\r\n      $analytics.eventTrack('Error: ' + reason.data, {\r\n        category: 'radio_tool',\r\n        label: reason.statusText + ': ' + reason.stauts\r\n      });\r\n      $scope.error = true;\r\n    }\r\n    $scope.loading_state = 'Loading Data';\r\n    messagesService.getMessages().then(onMessagesLoad, onFail);\r\n    messagesService.getCustom().then(onCustomLoad, onFail);\r\n    messagesService.getCommand().then(onCommandLoad, onCmdFail);\r\n  }];\r\n  app.controller('loadingController', loadingController);\r\n} ());\r\n\n/**\n * @Author: Drop\n * @Creation: 7/25/2016 5:41 PM (The death of Johnathan Kent)\n */\n(function () {\n    var app = angular.module('csgo-radio');\n    var mainController = ['$scope', '$rootScope', 'messagesService', 'uiService', function ($scope, $rootScope, messagesService, uiService) {\n        $scope.generate = function (ev) {\n           uiService.Dialog.output(ev, messagesService.GenerateRP(ev));\n        };\n\n        $scope.openChangelog = function(ev) {\n            uiService.Dialog.changelog(ev);\n        }\n\n        $scope.showHelp = function (ev, index) {\n            uiService.Dialog.help(ev, index);\n        };\n        $scope.newMessage = function (ev) {\n            uiService.Dialog.newMessage(ev);\n        };\n\n        $scope.editMessage = function (ev, list, item, index) {\n            uiService.Dialog.editMessage(ev, { list: list, message: item, index: index });\n        };\n\n        $scope.importFile = function (ev) {\n            uiService.Dialog.import(ev);\n        };\n\n        $scope.moved = function (list, index) {\n            $rootScope.model[list].splice(index, 1);\n        };\n\n        $scope.resetMessages = function ($event) {\n            uiService.Confirm.reset($event);\n        };\n\n        $scope.defaults = function ($event) {\n            uiService.Confirm.default($event);\n        };\n    }];\n    app.controller('mainController', mainController);\n} ());\n/**\n * @Author: Drop\n * @Creation: 7/26/2016 2:46 PM (Polyjuice Potion)\n */\n(function () {\n    var app = angular.module('csgo-radio');\n\n    var messageController = ['$scope', '$rootScope', 'uiService', function ($scope, $rootScope, uiService) {\n        $scope.removeMessage = function (list, message, index, ev) {\n            if (message.type === 'message') {\n                $rootScope.model.messages[message.cmd].disabled = false;\n                $rootScope.model[list].splice(index, 1);\n            } else {\n                if (message.type === 'custom') {\n                    $rootScope.model.custom[message.UID].disabled = false;\n                    $rootScope.model[list].splice(index, 1);\n                } else {\n                    uiService.Confirm.deleteImportedCommand(ev, list, message, index);\n                }\n            }\n        };\n        $scope.checkLimit = function (event, index, item) {\n            if (event.target.attributes[0].nodeName === 'data-list-name') { //Checks if target is the list\n                var targetName = event.target.attributes[0].nodeValue;\n            } else if (event.target.parentNode.attributes[0].nodeName === 'data-list-name') { //In case element was dropped in a child\n                var targetName = event.target.parentNode.attributes[0].nodeValue;\n            } else if (event.target.parentNode.parentNode.attributes[0].nodeName === 'data-list-name') { //Never trust the user, they said.\n                var targetName = event.target.parentNode.parentNode.attributes[0].nodeValue;\n            } else if (event.target.parentNode.parentNode.parentNode.attributes[0].nodeName === 'data-list-name') { //In case somebody drops into the pull left\n                var targetName = event.target.parentNode.parentNode.parentNode.attributes[0].nodeValue;\n            } else if (event.target.parentNode.parentNode.parentNode.parentNode.attributes[0].nodeName === 'data-list-name') { //Or the button\n                var targetName = event.target.parentNode.parentNode.parentNode.parentNode.attributes[0].nodeValue;\n            }\n            if (item.type === 'message') {\n                delete item.id;\n                delete item.label;\n                delete item.text;\n            }\n            if ($rootScope.model[targetName].indexOf(item) !== -1) {\n                return item;\n            }\n            if ($rootScope.model[targetName].length > 8) {\n                return false;\n            }\n            return item;\n        };\n    }];\n    app.controller('messageController', messageController);\n} ());\n\n/**\r\n * @Author: Drop\r\n * @Creation: 8/14/2016 6:50 PM (A Whirl Through Academe)\r\n */\r\n(function () {\r\n\r\n    angular.module('csgo-radio').factory('messageService', ['$rootScope', 'messagesService', '$analytics', function ($rootScope, messagesService, $analytics) {\r\n\r\n        var querySearch = function (query) {\r\n            if ($rootScope.init.Commands === true) {\r\n                var results = query ? $rootScope.init.commands.filter(this.newFilter(query)) : $rootScope.init.commands;\r\n                return results;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        var renderCommand = function (commandArray) {\r\n            var output = '';\r\n            for (var command in commandArray) {\r\n                if (commandArray[command].searchText.length === 0) {\r\n                    continue;\r\n                }\r\n                var args = (commandArray[command].args.length > 0) ? ' ' + commandArray[command].args : '';\r\n                output = output + commandArray[command].searchText + args + '; ';\r\n            }\r\n            return output;\r\n        };\r\n\r\n        var deleteMessage = function (UID, list) {\r\n            if ($rootScope.model.custom[UID].disabled === true && list !== 'custom') { //copy of it somewhere, must find the precious!\r\n                var messageCopy = $rootScope.model[list].filter(function (messageCopy) {\r\n                    return messageCopy.UID === UID;\r\n                })[0];\r\n                if (typeof messageCopy == 'undefined') { //That's not supposed to happen.\r\n                    $mdToast.show(\r\n                        $mdToast.simple()\r\n                            .textContent('Could not find the copy of the message.')\r\n                            .position('top right')\r\n                            .hideDelay(7000)\r\n                    );\r\n                    $analytics.eventTrack('Could not find Message clone', {\r\n                        category: 'radio_tool',\r\n                    });\r\n                    return false;\r\n                } else {\r\n                    delete $rootScope.model[list].splice($rootScope.model[list].indexOf(messageCopy), 1);\r\n                    delete $rootScope.model.custom[UID];\r\n                }\r\n            } else {\r\n                if ($rootScope.model.custom[UID].disabled === true) {\r\n                    var lists = ['standard', 'group', 'report'];\r\n                    for (var msgGroup in lists) {\r\n                        var messageCopy = $rootScope.model[lists[msgGroup]].filter(function (messageCopy) {\r\n                            return messageCopy.UID === UID;\r\n                        })[0];\r\n                        if (typeof messageCopy == 'undefined') { //That's not supposed to happen.\r\n                            continue;\r\n                        } else {\r\n                            delete $rootScope.model[list].splice($rootScope.model[lists[msgGroup]].indexOf(messageCopy), 1);\r\n                            delete $rootScope.model.custom[UID];\r\n                        }\r\n                    }\r\n                } else {\r\n                    delete $rootScope.model.custom[UID];\r\n                }\r\n            }\r\n        };\r\n\r\n        var saveChanges = function (message, origMessage, commandArray, list) {\r\n            if (origMessage.type === 'custom') {\r\n                console.log(message.color)\r\n                $rootScope.model.custom[origMessage.UID].cmd = this.renderCommand(commandArray);\r\n                $rootScope.model.custom[origMessage.UID].text = message.label;\r\n                $rootScope.model.custom[origMessage.UID].italic = message.italic;\r\n                $rootScope.model.custom[origMessage.UID].bold = message.bold;\r\n                $rootScope.model.custom[origMessage.UID].color = message.color;\r\n                if ($rootScope.model.custom[origMessage.UID].disabled === true && list !== 'custom') { //copy of it somewhere, must find the precious!\r\n                    var messageCopy = $rootScope.model[list].filter(function (messageCopy) {\r\n                        return messageCopy.UID === origMessage.UID;\r\n                    })[0];\r\n                    if (typeof messageCopy == 'undefined') { //That's not supposed to happen.\r\n                        $mdToast.show(\r\n                            $mdToast.simple()\r\n                                .textContent('Could not find the copy of the message.')\r\n                                .position('top right')\r\n                                .hideDelay(7000)\r\n                        );\r\n                        $analytics.eventTrack('Could not find Message clone', {\r\n                            category: 'radio_tool',\r\n                        });\r\n                        return false;\r\n                    }\r\n                    messageCopy.cmd = this.renderCommand(commandArray);\r\n                    messageCopy.text = message.label;\r\n                    messageCopy.italic = message.italic;\r\n                    messageCopy.bold = message.bold;\r\n                    messageCopy.color = message.color;\r\n                } else if ($rootScope.model.custom[origMessage.UID].disabled === true) {\r\n                    var lists = ['standard', 'group', 'report'];\r\n                    for (var msgGroup in lists) {\r\n                        var messageCopy = $rootScope.model[lists[msgGroup]].filter(function (messageCopy) {\r\n                            return messageCopy.UID === origMessage.UID;\r\n                        })[0];\r\n                        if (typeof messageCopy == 'undefined') { //That's not supposed to happen.\r\n                            continue;\r\n                        } else {\r\n                            messageCopy.cmd = this.renderCommand(commandArray);\r\n                            messageCopy.text = message.label;\r\n                            messageCopy.italic = message.italic;\r\n                            messageCopy.bold = message.bold;\r\n                            messageCopy.color = message.color;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (origMessage.type === 'imported') {\r\n                origMessage.cmd = this.renderCommand(commandArray);\r\n                origMessage.text = message.label;\r\n                origMessage.italic = message.italic;\r\n                origMessage.bold = message.bold;\r\n                origMessage.color = message.color;\r\n            }\r\n            if ($rootScope.settings.shared === true) {\r\n                messagesService.saveHash();\r\n            } else {\r\n                messagesService.save();\r\n            }\r\n        };\r\n\r\n        var createFilterFor = function (query) {\r\n            var lowercaseQuery = angular.lowercase(query);\r\n            return function filterFn(item) {\r\n                return (item.Name.indexOf(lowercaseQuery) === 0);\r\n            };\r\n        };\r\n\r\n        var renderCommand = function (commandArray) {\r\n            var output = '';\r\n            for (var command in commandArray) {\r\n                if (commandArray[command].searchText.length === 0) {\r\n                    continue;\r\n                }\r\n                var args = (commandArray[command].args.length > 0) ? ' ' + commandArray[command].args : '';\r\n                output = output + commandArray[command].searchText + args + '; ';\r\n            }\r\n            return output;\r\n        };\r\n\r\n        var findCommand = function (command) {\r\n            var query = this.querySearch(command);\r\n            if (query.length > 0 && query.length < 6) {\r\n                for (var item in query) {\r\n                    if (query[item].Name === command) {\r\n                        return query[item];\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        var parseCommandLine = function (commandLine) {\r\n            var commands = commandLine.split(';'), cmdArray = [];\r\n            for (var cmd in commands) {\r\n                if (commands[cmd].length > 0) {//TODO: REDO\r\n                    var split = commands[cmd].split(' ');\r\n                    if (split.length === 1 && split[0].length > 0) {//single command\r\n                        var cmdInfo = this.findCommand(((skipfirst === true) ? split[1] : split[0])), args = (typeof cmdInfo === 'undefined') ? '' : (typeof cmdInfo.Value === 'undefined') ? '' : cmdInfo.Value;\r\n                        cmdArray.push({ 'cmd': cmdInfo, 'args': args, 'searchText': split[0] })\r\n                    } else {\r\n                        var skipfirst = (split[0] === ' ' || split[0] === '  ' || split[0] === '') ? true : false;\r\n                        var args = (skipfirst === true) ? commands[cmd].replace(split[0] + split[1], '') : commands[cmd].replace(split[0], '');\r\n                        if (args.charAt(0) === ' ') {\r\n                            args = args.substring(1);\r\n                        }\r\n                        var cmdInfo = this.findCommand(((skipfirst === true) ? split[1] : split[0]));\r\n                        cmdArray.push({ 'cmd': cmdInfo, 'args': args, 'searchText': (skipfirst === true) ? split[1] : split[0] })\r\n                    }\r\n                }\r\n\r\n            }\r\n            return cmdArray;\r\n        };\r\n\r\n        var create = function (message, commandArray) {\r\n            message.UID = message.label.toLowerCase().replace(/[^a-zA-Z0-9]/g, '') + '-' + Math.floor((Math.random() * 100) + 1)\r\n            $rootScope.model.custom[message.UID] = {\r\n                'UID': message.UID,\r\n                'type': 'custom',\r\n                'disabled': false,\r\n                'cmd': this.renderCommand(commandArray),\r\n                'label': message.label.toLowerCase().replace(/[^a-zA-Z0-9]/g, ''),\r\n                'text': message.label,\r\n                'italic': message.bold,\r\n                'bold': message.bold,\r\n                'color': message.color,\r\n            };\r\n            $analytics.eventTrack('New Custom Command', {\r\n                category: 'radio_tool',\r\n            });\r\n        };\r\n        return {\r\n            saveEdit: saveChanges,\r\n            newFilter: createFilterFor,\r\n            renderCommand: renderCommand,\r\n            parseCommandLine: parseCommandLine,\r\n            newMessage: create,\r\n            findCommand: findCommand,\r\n            querySearch: querySearch,\r\n            deleteMessage: deleteMessage\r\n        };\r\n\r\n    }]);\r\n} ());\r\n\n/**\n * @Author: Drop\n * @Creation: 7/25/2016 4:05 PM (Welcome to Jurassic Park)\n */\n(function () {\n\n    angular.module('csgo-radio').factory('messagesService', ['$http', '$rootScope', 'localStorageService', '$filter', '$location', 'VDFService', '$mdToast', function ($http, $rootScope, localStorageService, $filter, $location, VDFService, $mdToast) {\n\n        var getMessages = function () {\n            return $http.get('data/radio.json')\n                .then(function (response) {\n                    return response.data;\n                });\n        };\n        var getChangelog = function () {\n            return $http.get('data/changelog.json')\n                .then(function (response) {\n                    return response.data;\n                });\n        };\n        var getCustom = function () {\n            return $http.get('data/custom.json')\n                .then(function (response) {\n                    return response.data;\n                });\n        };\n        var getCommand = function () {\n            return $http.get('data/command.json')\n                .then(function (response) {\n                    return response.data;\n                });\n        };\n\n        var generateRP = function ($event) {\n            if ($rootScope.model.standard.length > 0 || $rootScope.model.group.length > 0 || $rootScope.model.report.length > 0) {\n                var buildList = angular.copy($rootScope.settings.radioMenu);\n                buildList['RadioPanel.txt'].Groups.standard.title = ($rootScope.model.Titles[0] === $filter('translate')('boxes.title_0')) ? '#SFUI_CommandRadio' : $rootScope.model.Titles[0];\n                buildList['RadioPanel.txt'].Groups.group.title = ($rootScope.model.Titles[1] === $filter('translate')('boxes.title_1')) ? '#SFUI_StandardRadio' : $rootScope.model.Titles[1];\n                buildList['RadioPanel.txt'].Groups.report.title = ($rootScope.model.Titles[2] === $filter('translate')('boxes.title_2')) ? '#SFUI_ReportRadio' : $rootScope.model.Titles[2];\n                for (var C_box in $rootScope.settings.boxes) {\n                    var C_I = 1,\n                        E = $rootScope.settings.boxes[C_box].replace('Radio', '').toLowerCase();\n                    for (var C_msg in $rootScope.model[E]) {\n                        var msg = $rootScope.model[E][C_msg];\n                        if (msg.type === 'message') {\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.cmd] = {};\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.cmd].hotkey = C_I;\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.cmd].label = $rootScope.model.messages[msg.cmd].label;\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.cmd].cmd = $rootScope.model.messages[msg.cmd].cmd;\n                        } else {\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.UID] = {};\n                            if (msg.italic === true && msg.bold === false) {\n                                var label = '<i>' + msg.label + '</i>';\n                            } else if (msg.italic === false && msg.bold === true) {\n                                var label = '<b>' + msg.label + '</b>';\n                            } else if (msg.italic === true && msg.bold === true) {\n                                var label = '<i><b>' + msg.label + '</b></i>';\n                            } else {\n                                var label = msg.label;\n                            }\n                            if (msg.color !== false && msg.color !== '#000000' && typeof msg.color !== 'undefined') {\n                                label = '<font color=' + msg.color + '>' + label + '</font>';\n                            }\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.UID].hotkey = C_I;\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.UID].label = label;\n                            buildList['RadioPanel.txt'].Groups[E].Commands[msg.UID].cmd = msg.cmd;\n                        }\n                        C_I++;\n                    }\n                }\n                return VDFService.stringify(buildList, true);\n            }\n            return false;\n        };\n\n        var convertList = function (list) {\n            var filteredList = [];\n            for (var message in list) {\n                if (list[message].type === 'message') {\n                    filteredList.push(list[message].cmd);\n                } else {\n                    filteredList.push({\n                        'label': list[message].label,\n                        'text': list[message].text,\n                        'cmd': list[message].cmd,\n                        'italic': (typeof list[message].italic !== 'undefined') ? list[message].italic : false,\n                        'bold': (typeof list[message].bold !== 'undefined') ? list[message].bold : false,\n                        'color': (typeof list[message].color !== 'undefined') ? list[message].color : false,\n                    });\n                }\n            }\n            return filteredList;\n        };\n\n        var save = function () {\n            var save = {\n                'StandardRadio': convertList($rootScope.model.standard), 'GroupRadio': convertList($rootScope.model.group), 'ReportRadio': convertList($rootScope.model.report), 'Titles': [\n                    ($rootScope.model.Titles[0] === $filter('translate')('boxes.title_0')) ? null : $rootScope.model.Titles[0],\n                    ($rootScope.model.Titles[1] === $filter('translate')('boxes.title_1')) ? null : $rootScope.model.Titles[1],\n                    ($rootScope.model.Titles[2] === $filter('translate')('boxes.title_2')) ? null : $rootScope.model.Titles[2],\n                ]\n            };\n            if (localStorageService.isSupported) {\n                localStorageService.set('saved', save);\n            }\n            saveHash(save);\n        };\n\n        var htmlTags = function (msg, imported) { //actually, imported should be false\n            var label = msg.text || msg.label;\n            msg.italic = (this.strContains(label, '<i>') === true) ? true : false;\n            msg.bold = (this.strContains(label, '<b>') === true) ? true : false;\n            if (this.strContains(label, '<font') === true) {\n                var RG = label.match(/color='(.*?)'/);\n                msg.color = RG[1];\n                if (imported === true) {\n                    label = label.replace('<font ' + RG[0] + '>', '').replace('</font>', '');\n                } else {\n                    label = label.replace('<font ' + RG[0] + '>', '').replace('</font>', '');\n                }\n            }\n            if (imported === true) {\n                msg.text = label.replace('<i>', '').replace('</i>', '').replace('<b>', '').replace('</b>', '');\n            } else {\n                msg.label = label.replace('<i>', '').replace('</i>', '').replace('<b>', '').replace('</b>', '');\n            }\n            return msg;\n        }\n\n        var customExists = function (custom) {\n            for (var message in $rootScope.model.custom) {\n                if ($rootScope.model.custom.hasOwnProperty(message)) {\n                    if ($rootScope.model.custom[message].cmd === custom.cmd && $rootScope.model.custom[message].text === custom.text) {\n                        return message;\n                    }\n                }\n            }\n            return false;\n        };\n\n        var resetMessages = function () {\n            $rootScope.model.standard.length = 0;\n            $rootScope.model.group.length = 0;\n            $rootScope.model.report.length = 0;\n            $rootScope.model.Titles = [$filter('translate')('boxes.title_0'), $filter('translate')('boxes.title_1'), $filter('translate')('boxes.title_2')];\n\n            for (var message in $rootScope.model.messages) {\n                $rootScope.model.messages[message].disabled = false;\n            }\n            for (var custom in $rootScope.model.custom) {\n                $rootScope.model.custom[custom].disabled = false;\n            }\n        };\n\n        var customFilter = function (list) {\n            var filteredList = {};\n            for (var message in list) {\n                filteredList[message] = {\n                    'UID': list[message].UID,\n                    'label': list[message].label,\n                    'text': list[message].text,\n                    'cmd': list[message].cmd,\n                    'italic': (typeof list[message].italic !== 'undefined') ? list[message].italic : false,\n                    'bold': (typeof list[message].bold !== 'undefined') ? list[message].bold : false,\n                    'color': (typeof list[message].color !== 'undefined') ? list[message].color : false,\n                    'type': list[message].type\n                };\n            }\n            return filteredList;\n        };\n\n        var customSave = function () { //Auto save custom\n            if (localStorageService.isSupported) {\n                localStorageService.set('custom', customFilter($rootScope.model.custom));\n            }\n        };\n\n        var importCustom = function (custom) {\n            $rootScope.model.custom = custom;\n            $rootScope.$watch('model.custom', customSave, true);\n        };\n\n        var importOldCustom = function (custom) {\n            var newList = {};\n            for (var message in custom) {\n                var UID = custom[message].label.toLowerCase().replace(/[^a-zA-Z0-9]/g, '') + '-' + Math.floor((Math.random() * 100) + 1);\n                newList[UID] = {\n                    'UID': UID,\n                    'text': custom[message].label,\n                    'label': custom[message].label.toLowerCase().replace(/[^a-zA-Z0-9]/g, ''),\n                    'cmd': custom[message].cmd,\n                    'italic': (typeof custom[message].italic !== 'undefined') ? custom[message].italic : false,\n                    'bold': (typeof custom[message].bold !== 'undefined') ? custom[message].bold : false,\n                    'color': (typeof custom[message].color !== 'undefined') ? custom[message].color : false,\n                    'type': 'custom'\n                };\n            }\n            this.importCustom(newList);\n        };\n\n        var SaveMessages = save;\n\n        var ImportRP = function (model) {\n            var parse = VDFService.parse(model.file);\n            if (typeof parse['RadioPanel.txt'] !== 'undefined' && parse !== false) {\n                var obj = {};\n                for (var group in parse['RadioPanel.txt'].Groups) {\n                    if (group === 'group' || group === 'report' || group === 'standard') {\n                        obj[group] = [];\n                        for (var msg in parse['RadioPanel.txt'].Groups[group].Commands) {\n                            var cMsg = parse['RadioPanel.txt'].Groups[group].Commands[msg];\n                            if ($rootScope.model.messages.hasOwnProperty(cMsg.cmd) === true) {\n                                obj[group].push(cMsg.cmd);\n                            } else {\n                                obj[group].push(this.checkHtmlTags(cMsg));\n                            }\n                        }\n                    }\n                }\n                obj['titles'] = Array((parse['RadioPanel.txt'].Groups.standard.title === '#SFUI_CommandRadio') ? null : parse['RadioPanel.txt'].Groups.standard.title,\n                    (parse['RadioPanel.txt'].Groups.group.title === '#SFUI_StandardRadio') ? null : parse['RadioPanel.txt'].Groups.group.title,\n                    (parse['RadioPanel.txt'].Groups.report.title === '#SFUI_ReportRadio') ? null : parse['RadioPanel.txt'].Groups.report.title);\n                this.importMessages({ 'StandardRadio': obj.standard, 'GroupRadio': obj.group, 'ReportRadio': obj.report, 'Titles': obj.titles }, true, false, model.copy);\n            } else {\n                return false;\n            }\n        };\n\n        var importMessages = function (save, imported, shared, copy) {\n            if (typeof save.StandardRadio !== 'undefined' && typeof save.GroupRadio !== 'undefined' && typeof save.ReportRadio !== 'undefined' && typeof save.Titles !== 'undefined') {\n                resetMessages();\n                $rootScope.model.standard = save.StandardRadio;\n                $rootScope.model.group = save.GroupRadio;\n                $rootScope.model.report = save.ReportRadio;\n                $rootScope.model.Titles = save.Titles;\n\n                for (var i = 0; i <= 2; ++i) {\n                    if ($rootScope.model.Titles[i] === null) {\n                        $rootScope.model.Titles[i] = $filter('translate')('boxes.title_' + i);\n                    }\n                }\n                var groups = ['StandardRadio', 'GroupRadio', 'ReportRadio'];\n\n                for (var group in groups) {\n                    var group = groups[group];\n                    for (var message in save[group]) {\n                        if (typeof save[group][message] === 'string') {\n                            $rootScope.model.messages[save[group][message]].disabled = true;\n                            save[group][message] = { 'type': 'message', 'cmd': save[group][message] };\n                        }\n                        else {\n                            if (typeof save[group][message].text === 'undefined') { //We have a 1.x commandlist here\n                                save[group][message].text = save[group][message].label;\n                            }\n                            var check = customExists(save[group][message]);\n                            if (typeof check === 'string') {\n                                $rootScope.model.custom[check].disabled = true;\n                                save[group][message].type = 'custom';\n                                save[group][message].UID = $rootScope.model.custom[check].UID;\n                                continue;\n                            } else {\n                                if (copy === true) {\n                                    save[group][message].UID = message.text.toLowerCase().replace(/[^a-zA-Z0-9]/g, '') + '-' + Math.floor((Math.random() * 100) + 1);\n                                    save[group][message].type = 'custom';\n                                    save[group][message].disabled = false;\n                                    save[group][message].label = save[group][message].text.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n                                    $rootScope.model.custom[save[group][message].UID] = save[group][message];\n                                }\n                                if (imported === true || shared === true) {\n                                    save[group][message].type = 'imported';\n                                    save[group][message].disabled = false;\n                                    save[group][message].label = save[group][message].text.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n                                }\n                            }\n                        }\n                    }\n                }\n                if (shared === false && imported === false && $rootScope.model.watch !== true) {\n                    $rootScope.$watch('model', SaveMessages, true);\n                    $rootScope.model.watch = true;\n                }\n            } else {\n                $mdToast.show(\n                    $mdToast.simple()\n                        .textContent('This is not RadioPanel.txt')\n                        .position('top right')\n                        .hideDelay(5000)\n                );\n            }\n        }\n\n        var defaults = function () {\n            importMessages(JSON.parse('{\"StandardRadio\":[\"go\",\"fallback\",\"sticktog\",\"holdpos\",\"followme\"],\"GroupRadio\":[\"roger\",\"negative\",\"cheer\",\"compliment\",\"thanks\"],\"ReportRadio\":[\"enemyspot\",\"needbackup\",\"takepoint\",\"sectorclear\",\"inposition\"],\"Titles\":[null,null,null]}'), false, false, false)\n        };\n\n        var saveHash = function (save) {\n            if (typeof save === 'undefined') {\n                var save = {\n                    'StandardRadio': convertList($rootScope.model.standard), 'GroupRadio': convertList($rootScope.model.group), 'ReportRadio': convertList($rootScope.model.report), 'Titles': [\n                        ($rootScope.model.Titles[0] === $filter('translate')('boxes.title_0')) ? null : $rootScope.model.Titles[0],\n                        ($rootScope.model.Titles[1] === $filter('translate')('boxes.title_1')) ? null : $rootScope.model.Titles[1],\n                        ($rootScope.model.Titles[2] === $filter('translate')('boxes.title_2')) ? null : $rootScope.model.Titles[2],\n                    ]\n                };\n            }\n            $location.hash(JSON.stringify(save));\n        }\n\n        return {\n            getMessages: getMessages,\n            getCustom: getCustom,\n            getChangelog: getChangelog,\n            save: save,\n            importMessages: importMessages,\n            resetMessages: resetMessages,\n            importCustom: importCustom,\n            checkHtmlTags: htmlTags,\n            default: defaults,\n            saveHash: saveHash,\n            getCommand: getCommand,\n            customSave: customSave,\n            ImportRP: ImportRP,\n            GenerateRP: generateRP,\n            importOldCustom: importOldCustom\n        };\n\n    }]);\n} ());\n\n/**\n * @Author: Drop\n * @Creation: 8/2/2016 3:06 PM (The Big Rescue)\n */\n(function () {\n    var app = angular.module('csgo-radio');\n\n    var newMessageController = ['$scope', '$rootScope', '$mdDialog', 'list', 'message', 'index', 'messageService', 'uiService', function ($scope, $rootScope, $mdDialog, list, message, index, messageService, uiService) { //This is for creation and editing.\n        $scope.selected = 0;\n        function requirements() {\n            $scope.requirements = { 'cheats': false, 'dev': false, 'sponly': false };\n            for (var command in $scope.commands) {\n                if ($scope.commands[command].cmd === null) { continue; }\n                if (typeof $scope.commands[command].cmd.ch !== 'undefined' && $scope.requirements.cheats === false) { $scope.requirements.cheats = true; }\n                if (typeof $scope.commands[command].cmd.do !== 'undefined' && $scope.requirements.dev === false) { $scope.requirements.dev = true; }\n                if (typeof $scope.commands[command].cmd.sp !== 'undefined' && $scope.requirements.sponly === false) { $scope.requirements.sponly = true; }\n                if (typeof $scope.commands[command].cmd.cd !== 'undefined' && $scope.requirements.client === false) { $scope.requirements.client = true; }\n                if (typeof $scope.commands[command].cmd.gl !== 'undefined' && $scope.requirements.server === false) { $scope.requirements.server = true; }\n            }\n        }\n        $scope.dialog = { 'advanced': false };\n        if (typeof list == 'undefined' && typeof message == 'undefined' && typeof list == 'undefined') { //Creation Mode\n            $scope.message = { 'label': '', 'italic': false, 'bold': false, 'color': '#000000' };\n\n            $scope.commands = [{ 'cmd': { 'Name': 'noclip' }, 'args': '', 'searchText': 'noclip' }];\n\n            $scope.requirements = { 'cheats': true, 'dev': false, 'sponly': false };\n            var New = true;\n            $scope.mode = 'new';\n        } else {\n            if (message.type === 'custom') {\n                $scope.message = {\n                    'italic': (typeof $rootScope.model.custom[message.UID].italic == 'undefined') ? false : $rootScope.model.custom[message.UID].italic,\n                    'bold': (typeof $rootScope.model.custom[message.UID].bold == 'undefined') ? false : $rootScope.model.custom[message.UID].bold,\n                    'label': $rootScope.model.custom[message.UID].text,\n                    'color': $rootScope.model.custom[message.UID].color,\n                    'UID': message.UID\n                };\n\n                $scope.custom = true;\n                $scope.commands = messageService.parseCommandLine($rootScope.model.custom[message.UID].cmd);\n            } else {\n                $scope.message = {\n                    'italic': (typeof message.italic == 'undefined') ? false : message.italic,\n                    'bold': (typeof message.bold == 'undefined') ? false : message.bold,\n                    'label': message.text,\n                    'color': message.color\n                };\n\n                $scope.custom = false;\n                $scope.commands = messageService.parseCommandLine(message.cmd);\n                $scope.dialog.copyBtn = true;\n            }\n            requirements();\n            var New = false;\n            $scope.mode = 'edit';\n        }\n\n\n        $scope.dialog.colorpickeroptions = {\n            label: 'Choose a color',\n            default: '#000000',\n            genericPalette: false,\n            preview: false,\n            history: true,\n            rgb: false,\n            clearButton: true,\n            hsl: false\n        };\n\n        $scope.cacheResults = true;\n\n        $scope.autocomplete = $rootScope.init.Commands;\n\n        $scope.querySearch = function (query) {\n            if ($rootScope.init.Commands === true) {\n                var results = query ? $rootScope.init.commands.filter(messageService.newFilter(query)) : $rootScope.init.commands;\n                return results;\n            }\n            return [];\n        };\n\n        $scope.checkArg = function (index) {\n            if ($scope.commands[index].args.length === 0 && $scope.commands[index].cmd !== null) {\n                if (typeof $scope.commands[index].cmd.Value !== 'undefined') {\n                    $scope.commands[index].args = $scope.commands[index].cmd.Value;\n                }\n            }\n            requirements();\n        };\n\n        $scope.togAdv = function () {\n            if ($scope.dialog.advanced === true) {\n                $scope.message.rawCommand = messageService.renderCommand($scope.commands);\n                $scope.message.rawCommandBefore = messageService.renderCommand($scope.commands);\n            } else {\n                if ($scope.message.rawCommand !== $scope.message.rawCommandBefore) {\n                    $scope.commands = messageService.parseCommandLine($scope.message.rawCommand);\n                    requirements();\n                }\n\n            }\n        };\n\n        $scope.togI = function () {\n            $scope.message.italic = !$scope.message.italic;\n        };\n\n        $scope.togB = function () {\n            $scope.message.bold = !$scope.message.bold;\n        };\n\n        $scope.addField = function () {\n            $scope.commands.push({ 'cmd': '', 'args': '', 'searchText': '' });\n        };\n\n        $scope.deleteM = function (ev) {\n            if (message.type === 'custom') {\n                uiService.Confirm.deleteCustomCommand(ev, message, list, $mdDialog);\n            }\n        };\n\n        $scope.hide = function () {\n            $mdDialog.hide();\n            $scope.$destroy();\n        };\n        $scope.cancel = function () {\n            $mdDialog.cancel();\n            $scope.$destroy();\n        };\n        $scope.confirm = function () {\n            if (Object.keys($scope.cmdName.label.$error).length > 0) {\n                $scope.selected = 0;\n                $scope.cmdName.$submitted = true;\n            } else {\n                if (New === true) {\n                    messageService.newMessage($scope.message, $scope.commands);\n                } else {\n                    console.log($scope.message)\n                    messageService.saveEdit($scope.message, message, $scope.commands, list);\n                }\n                $mdDialog.hide();\n                $scope.$destroy();\n            }\n        };\n    }];\n\n    app.controller('newMessageController', newMessageController);\n} ());\n\n/**\n * @Author: Drop\n * @Creation: 8/3/2016 9:34 PM (Radagast the brown)\n */\n(function () {\n    var app = angular.module('csgo-radio');\n\n    var sharedController = ['$scope', '$rootScope', 'messagesService', function ($scope, $rootScope, messagesService) {\n\n        $scope.save = function () {\n            $rootScope.$watch('model', messagesService.save, true);\n            $rootScope.settings.shared = false;\n            $rootScope.settings.hasSaved = false;\n        };\n\n        $scope.copyAll = function () {\n            var groups = ['standard', 'group', 'report'];\n            for (var group in groups) {\n                var group = groups[group];\n                for (var custom in $rootScope.model[group]) {\n                    if (typeof $rootScope.model[group][custom] !== 'string') {\n                        if ($rootScope.model[group][custom].type === 'imported') {\n                            $rootScope.model[group][custom].UID = $rootScope.model[group][custom].text.toLowerCase().replace(/[^a-zA-Z0-9]/g, '') + '-' + Math.floor((Math.random() * 100) + 1);\n                            $rootScope.model[group][custom].type = 'custom';\n                            $rootScope.model[group][custom].disabled = true;\n                            $rootScope.model[group][custom].label = $rootScope.model[group][custom].text.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n                            $rootScope.model.custom[$rootScope.model[group][custom].UID] = $rootScope.model[group][custom];\n                        }\n                    }\n                }\n            }\n        };\n    }];\n\n    app.controller('sharedController', sharedController);\n} ());\n\n/**\r\n * @Author: Drop\r\n * @Creation: 8/15/2016 4:37 PM (The trip to Earth)\r\n */\r\n(function () {\r\n\r\n    angular.module('csgo-radio').factory('uiService', ['$rootScope', '$filter', '$mdDialog', 'messagesService', 'VDFService', '$analytics', 'messageService', function ($rootScope, $filter, $mdDialog, messagesService, VDFService, $analytics, messageService) {\r\n\r\n        var InvokeConfirm = function (ev, yes, message, callback) {\r\n            $mdDialog.show($mdDialog.confirm({ skipHide: true })\r\n                .title($filter('translate')('modal.prompt.title'))\r\n                .textContent($filter('translate')('modal.prompt.body') + ' ' + message + '?')\r\n                .targetEvent(ev)\r\n                .ok(yes)\r\n                .cancel($filter('translate')('modal.prompt.no'))).then(callback, function () { });\r\n        };\r\n\r\n        var GenericDialogController = ['$scope', '$mdDialog', '$rootScope', function ($scope, $mdDialog, $rootScope) {\r\n            $scope.hide = function () {\r\n                $mdDialog.hide();\r\n            };\r\n            $scope.cancel = function () {\r\n                $mdDialog.cancel();\r\n            };\r\n            $scope.answer = function (awnser) {\r\n                $mdDialog.cancel(awnser);\r\n            }\r\n        }];\r\n\r\n        var InvokeDialog = function (ev, options) {\r\n            options.controller = (typeof options.controller === 'undefined') ? GenericDialogController : options.controller;\r\n            options.clickOutsideToClose = (typeof options.clickOutsideToClose === 'undefined') ? false : options.clickOutsideToClose;\r\n            options.skipHide = (typeof options.skipHide === 'undefined') ? false : options.skipHide;\r\n            options.locals = (typeof options.locals === 'undefined') ? {} : options.locals;\r\n            options.callback = (typeof options.callback === 'undefined') ? function () { } : options.callback;\r\n            $mdDialog.show({\r\n                controller: options.controller,\r\n                templateUrl: options.template,\r\n                parent: angular.element(document.body),\r\n                targetEvent: ev,\r\n                clickOutsideToClose: options.clickOutsideToClose,\r\n                skipHide: options.skipHide,\r\n                locals: options.locals\r\n            }).then(options.callback);\r\n        };\r\n\r\n        var confirm = {\r\n            reset: function ($event) {\r\n                InvokeConfirm($event, $filter('translate')('modal.prompt.Reset'), $filter('translate')('modal.prompt.reset'), function () {\r\n                    messagesService.resetMessages();\r\n                    $analytics.eventTrack('Reset Messages', {\r\n                        category: 'radio_tool',\r\n                    });\r\n                });\r\n            },\r\n            default: function ($event) {\r\n                InvokeConfirm($event, $filter('translate')('modal.prompt.yes'), $filter('translate')('modal.prompt.defaults'), function () {\r\n                    messagesService.default();\r\n                    $analytics.eventTrack('Reset to Game defaults', {\r\n                        category: 'radio_tool',\r\n                    });\r\n                });\r\n            },\r\n            deleteCustomCommand: function ($event, message, list, dialog) {\r\n                InvokeConfirm($event, $filter('translate')('modal.prompt.delete'), $filter('translate')('modal.prompt.delcmd') + ' ' + message.text, function () {\r\n                    messageService.deleteMessage(message.UID, list);\r\n                    dialog.cancel();\r\n                });\r\n            },\r\n            deleteImportedCommand: function ($event, list, message, index) {\r\n                InvokeConfirm($event, $filter('translate')('modal.prompt.delete'), $filter('translate')('modal.prompt.delcmd') + ' ' + message.text, function () {\r\n                    $rootScope.model[list].splice(index, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        var dialog = {\r\n            help: function ($event, index) {\r\n                index = (typeof index === 'undefined') ? 0 : index;\r\n                InvokeDialog($event, { template: 'help-dialog.html', skipHide: true, clickOutsideToClose: true, });\r\n                $analytics.eventTrack('Help Dialog', {\r\n                    category: 'radio_tool',\r\n                });\r\n            },\r\n            newMessage: function ($event) {\r\n                InvokeDialog($event, { controller: 'newMessageController', template: 'new-message-dialog.html', locals: { list: undefined, message: undefined, index: undefined } });\r\n            },\r\n            editMessage: function ($event, locals) {\r\n                InvokeDialog($event, { controller: 'newMessageController', template: 'new-message-dialog.html', locals: locals, skipHide: true });\r\n            },\r\n            changelog: function ($event, locals) {\r\n                var onChangelog = function (data) {\r\n                    $rootScope.init.Changelog = true;\r\n                    $rootScope.init.changelog = data;\r\n                    InvokeDialog($event, { template: 'changelog-dialog.html' });\r\n                };\r\n                var onFail = function (reason, type) {\r\n                    //TODO: ERROR HANDLER\r\n                };\r\n                if ($rootScope.init.ChangeLog === true) {\r\n                    InvokeDialog($event, { template: 'changelog-dialog.html' });\r\n                } else {\r\n                    messagesService.getChangelog().then(onChangelog, onFail)\r\n                }\r\n            },\r\n            import: function ($event) {\r\n                InvokeDialog($event, {\r\n                    controller: ['$scope', '$mdDialog', 'messagesService', function ($scope, $mdDialog, messagesService) {\r\n                        $scope.import = { copy: true };\r\n\r\n                        $scope.cancel = function () {\r\n                            $mdDialog.cancel();\r\n                        };\r\n\r\n                        $scope.ok = function () {\r\n                            if (Object.keys($scope.importForm.file.$error).length > 0) {\r\n                                $scope.importForm.$submitted = true;\r\n                            } else {\r\n                                if (messagesService.ImportRP($scope.import) !== false) {\r\n                                    $mdDialog.hide();\r\n                                    $analytics.eventTrack('Imported RadioPanel.txt', {\r\n                                        category: 'radio_tool',\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n                    }], template: 'import-dialog.html'\r\n                });\r\n            },\r\n            output: function ($event, output) {\r\n                if (output !== false) {\r\n                    InvokeDialog($event, {\r\n                        template: 'output-dialog.html', locals: { extra: { output: output, helpD: this.help } }, controller: ['$scope', '$mdDialog', 'extra', function ($scope, $mdDialog, extra) {\r\n                            $scope.extra = extra;\r\n\r\n                            $scope.hide = function () {\r\n                                $mdDialog.hide();\r\n                            };\r\n                            $scope.cancel = function () {\r\n                                $mdDialog.cancel();\r\n                            };\r\n                        }]\r\n                    });\r\n                    $analytics.eventTrack('Generated RadioPanel.txt', {\r\n                        category: 'radio_tool',\r\n                    });\r\n                } else {\r\n                    $analytics.eventTrack('Tried to Generate empty list', {\r\n                        category: 'radio_tool',\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        return {\r\n            Confirm: confirm,\r\n            Dialog: dialog\r\n        };\r\n\r\n    }]);\r\n} ());\r\n\n// a simple parser for Valve's KeyValue format\n// https://developer.valvesoftware.com/wiki/KeyValues\n//\n// author: Rossen Popov, 2014\n//Adapted as an angular service by Drop\n(function () {\n\n    var VDFService = ['$mdToast', function ($mdToast) {\n        var error = function (text) {\n            $mdToast.show(\n                $mdToast.simple()\n                    .textContent(text)\n                    .position('top right')\n                    .hideDelay(5000)\n            );\n        };\n        var _dump = function (obj, pretty, level) {\n            if (typeof obj != 'object') {\n                ui.notification('vdf', 'VDF.stringify: a key has value of type other than string or object');\n                return false;\n            }\n\n            var indent = '\\t';\n            var buf = '';\n            var line_indent = '';\n\n\n            if (pretty) {\n                for (var i = 0; i < level; i++) {\n                    line_indent += indent;\n                }\n            }\n\n            for (var key in obj) {\n                if (typeof obj[key] == 'object') {\n                    buf += [line_indent, '\"', key, '\"\\n', line_indent, '{\\n', _dump(obj[key], pretty, level + 1), line_indent, '}\\n'].join('');\n                } else {\n                    buf += [line_indent, '\"', key, '\" \"', String(obj[key]), '\"\\n'].join('');\n                }\n            }\n\n            return buf;\n        },\n            parse = function (text) {\n                if (typeof text != 'string') {\n                    error('VDF.parse: Expecting parameter to be a string');\n                    return false;\n                }\n\n                var lines = text.split('\\n'), line, m;\n\n                var obj = {};\n                var stack = [obj];\n                var expect_bracket = false;\n                var name = '';\n\n                var re_kv = new RegExp(\n                    '^(\"((?:\\\\\\\\.|[^\\\\\\\\\"])+)\"|([a-z0-9\\\\-\\\\_]+))' +\n                    '([ \\t]*(' +\n                    '\"((?:\\\\\\\\.|[^\\\\\\\\\"])*)(\")?' +\n                    '|([a-z0-9\\\\-\\\\_]+)' +\n                    '))?'\n                );\n\n                var i = 0,\n                    j = lines.length;\n                for (; i < j; i++) {\n                    line = lines[i].trim();\n\n                    // skip empty and comment lines\n                    if (line == '' || line[0] == '/') {\n                        continue;\n                    }\n\n                    // one level deeper\n                    if (line[0] == '{') {\n                        expect_bracket = false;\n                        continue;\n                    }\n\n                    if (expect_bracket) {\n                        error('VDF.parse: invalid syntax on line ' + (i + 1));\n                        return false;\n                    }\n\n                    // one level back\n                    if (line[0] == '}') {\n                        stack.pop();\n                        continue;\n                    }\n\n                    // parse keyvalue pairs\n                    while (true) {\n                        m = re_kv.exec(line);\n\n                        if (m === null) {\n                            error('VDF.parse: invalid syntax on line ' + (i + 1));\n                            return false;\n                        }\n\n                        // qkey = 2\n                        // key = 3\n                        // qval = 6\n                        // vq_end = 7\n                        // val = 8\n                        var key = (m[2] !== undefined) ? m[2] : m[3];\n                        var val = (m[6] !== undefined) ? m[6] : m[8];\n\n                        if (val === undefined) {\n                            stack[stack.length - 1][key] = {};\n                            stack.push(stack[stack.length - 1][key]);\n                            expect_bracket = true;\n                        } else {\n                            if (m[7] === undefined && m[8] === undefined) {\n                                line += '\\n' + lines[++i];\n                                continue;\n                            }\n\n                            stack[stack.length - 1][key] = val;\n                        }\n\n                        break;\n                    }\n                }\n\n                if (stack.length != 1) {\n                    error('VDF.parse: open parentheses somewhere');\n                    return false;\n                }\n\n                return obj;\n            },\n\n            stringify = function (obj, pretty) {\n                if (typeof obj != 'object') {\n                    error('VDF.stringify: First input parameter is not an object');\n                }\n\n                pretty = (typeof pretty == 'boolean' && pretty) ? true : false;\n\n                return _dump(obj, pretty, 0);\n            };\n        return { parse: parse, stringify: stringify };\n    }],\n        module = angular.module('csgo-radio');\n    module.factory('VDFService', VDFService);\n} ());"]}